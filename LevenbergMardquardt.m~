function [rV, t] = LevenbergMardquardt(rVnull,tNull, intriniscMatrix, Mi, mi,N, tau)
%% Constants
% RNull = % initial rotation matrix
% tNull = % initial translation vector
% M = [] % point you need to match
% m = [] % point to match to
% M =  [0.020 0. 0.045];
% m =  [1.3458e+03;1.1372e+03;1];
% e1 = [1;0;0];
% e2 = [0;1;0];
% e3 = [0;0;1];

%% initialize
%mEst = [] % estimate of m
rVEst = rVNull; % estimate of rotation matrix
tEst = tNull; % estimate of translation vector
rVtEst = [rVEst tEst];
t = 0;
lambda = 0.001;
u = tau +1;
%mEst = intrinsicMatrix'*(RTEst(:,1:3)*M'+RTEst(:,4));

%% main loop
while t < N && u > tau
    J = computeJacobian(rVtEst, intrinsicMatrix,Mi,mi);
    e = computeEnergi(rVtEst, intrinsicMatrix,Mi,mi);
    delta = (J'*J+lanbda*eye(size(J)))^-1*(J'*e);
    eNew = computeEnergi(R)
end


%% calculating the jacobian
W = [1/mEst(3) 0 -mEst(1)/mEst(3)^2;
     0 1/mEst(3) -mEst(2)/mEst(3)^2];
A = intrinsicMatrix';
v = rotationMatrixToVector(REst);
vSkew = [  0   -v(3)  v(2);
          v(3)   0   -v(1);
         -v(2)  v(1)   0  ];
Rd1CrossProduct = cross(v',(eye(3)-REst)*e1);
Rd1CrossProductSkew = [      0             -Rd1CrossProduct(3)   Rd1CrossProduct(2);
                        Rd1CrossProduct(3)        0             -Rd1CrossProduct(1);
                       -Rd1CrossProduct(2)  Rd1CrossProduct(1)        0            ];
Rd1 = (vSkew +Rd1CrossProductSkew)/norm(v)^2*REst;
Rd2CrossProduct = cross(v',(eye(3)-REst)*e1);
Rd2CrossProductSkew = [      0             -Rd2CrossProduct(3)   Rd2CrossProduct(2);
                        Rd2CrossProduct(3)        0             -Rd2CrossProduct(1);
                       -Rd2CrossProduct(2)  Rd2CrossProduct(1)        0            ];
Rd2 = (vSkew +Rd2CrossProductSkew)/norm(v)^2*REst;
Rd3CrossProduct = cross(v',(eye(3)-REst)*e1);
Rd3CrossProductSkew = [      0             -Rd3CrossProduct(3)   Rd3CrossProduct(2);
                        Rd3CrossProduct(3)        0             -Rd3CrossProduct(1);
                       -Rd3CrossProduct(2)  Rd3CrossProduct(1)        0            ];
Rd3 = (vSkew +Rd3CrossProductSkew)/norm(v)^2*REst;
RTd = [ Rd1*M' Rd2*M' Rd3*M' eye(3)];
J_ana = W*A*RTd;




